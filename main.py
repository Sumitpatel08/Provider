import os
import sys
import asyncio
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from threading import Thread
import signal

import pytz
from pyrogram import Client
from pyrogram.enums import ParseMode
from flask import Flask
import pyrogram.utils

from config import Config

pyrogram.utils.MIN_CHANNEL_ID = -1009147483647

user_client = None
FLASK_PORT = 8087

flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "ü§ñ ·¥†…™·¥Öx·¥õ Ä·¥Ä·¥Ñ·¥õ·¥è Ä …™s  Ä·¥ú…¥…¥…™…¥…¢!"

@flask_app.route('/status')
def status():
    return {
        "status": "active",
        "timestamp": datetime.now().isoformat(),
        "service": "·¥†…™·¥Öx·¥õ Ä·¥Ä·¥Ñ·¥õ·¥è Ä  ô·¥è·¥õ"
    }

def run_flask():
    try:
        flask_app.run(host="0.0.0.0", port=FLASK_PORT, debug=False, use_reloader=False)
    except Exception as e:
        print(f"‚ùå “ì ü·¥Äs·¥ã s·¥á Ä·¥†·¥á Ä ·¥á Ä Ä·¥è Ä: {e}")

def keep_alive():
    thread = Thread(target=run_flask, daemon=True)
    thread.start()
    print(f"‚úÖ ·¥ã·¥á·¥á·¥ò-·¥Ä ü…™·¥†·¥á s·¥á Ä·¥†·¥á Ä s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥è…¥ ·¥ò·¥è Ä·¥õ {FLASK_PORT}")

def get_indian_time():
    ist_timezone = pytz.timezone("Asia/Kolkata")
    return datetime.now(ist_timezone)


class Bot(Client):
    def __init__(self):
        super().__init__(
            name="ytdl_bot",
            api_hash=Config.API_HASH,
            api_id=Config.API_ID,
            plugins={"root": "commands"},
            bot_token=Config.BOT_TOKEN
        )
        self.is_running = False

    async def start(self):
        try:
            await super().start()
            self.is_running = True
            
            bot_info = await self.get_me()
            self.username = bot_info.username
            self.uptime = get_indian_time()
            
            print(f"üöÄ s·¥õ·¥Ä Ä·¥õ…™…¥…¢ {bot_info.first_name} (@{bot_info.username})")
            
            
            self.set_parse_mode(ParseMode.HTML)
            await self._send_startup_notification()
            
            print("üéâ  ô·¥è·¥õ …™s …¥·¥è·¥° “ì·¥ú ü ü è ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥·¥Ä ü!")
            return True
            
        except Exception as e:
            print(f"‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ  ô·¥è·¥õ: {e}")
            self.is_running = False
            return False

    async def stop(self, *args):
        if self.is_running:
            try:
                await super().stop()
                self.is_running = False
                print("üõë  ô·¥è·¥õ s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö …¢ Ä·¥Ä·¥Ñ·¥á“ì·¥ú ü ü è")
            except Exception as e:
                print(f"‚ùå ·¥á Ä Ä·¥è Ä ·¥Ö·¥ú Ä…™…¥…¢  ô·¥è·¥õ s ú·¥ú·¥õ·¥Ö·¥è·¥°…¥: {e}")

    def run(self):
        loop = None
        try:
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            def signal_handler(signum, frame):
                print(f"\nüõë  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö s…™…¢…¥·¥Ä ü {signum}, s ú·¥ú·¥õ·¥õ…™…¥…¢ ·¥Ö·¥è·¥°…¥...")
                if self.is_running:
                    loop.create_task(self.stop())
                loop.stop()
            
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)
            
            startup_success = loop.run_until_complete(self.start())
            
            if not startup_success:
                print("‚ùå  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥ú·¥ò “ì·¥Ä…™ ü·¥á·¥Ö")
                return
                
            print("üîÑ  ô·¥è·¥õ ·¥á·¥†·¥á…¥·¥õ  ü·¥è·¥è·¥ò s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö")
            loop.run_forever()
            
        except KeyboardInterrupt:
            print("\nüõë ·¥ã·¥á è ô·¥è·¥Ä Ä·¥Ö …™…¥·¥õ·¥á Ä Ä·¥ú·¥ò·¥õ  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö")
            
        except Exception as e:
            print(f"‚ùå  ô·¥è·¥õ ·¥Ñ Ä·¥Äs ú·¥á·¥Ö: {e}")
            
        finally:
            try:
                if loop and not loop.is_closed():
                    if self.is_running:
                        loop.run_until_complete(self.stop())
                    loop.close()
                print("‚úÖ ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö")
            except Exception as e:
                print(f"‚ùå ·¥á Ä Ä·¥è Ä ·¥Ö·¥ú Ä…™…¥…¢ ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò: {e}")

    async def _send_startup_notification(self):
        try:
            startup_message = f"¬ª <b> s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!</b>\n\n‚è∞ <i>s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö:</i> {self.uptime.strftime('%Y-%m-%d %H:%M:%S IST')}\n\nüò¥ <i>·¥Ö…™·¥Ö …¥·¥è·¥õ s ü·¥á·¥á·¥ò ·¥õ…™ ü ü …¥·¥è·¥°...</i>"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("¬ª ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è", url="https://t.me/nyxgenie"),
                 InlineKeyboardButton("¬ª ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url="https://t.me/shizukawachan")]
            ])
            
            if Config.ADMIN_USERS:
                await self.send_photo(
                    chat_id=Config.ADMIN_USERS[0],
                    photo=Config.FORCE_PIC,
                    caption=startup_message,
                    reply_markup=keyboard
                )
                print("‚úÖ s·¥õ·¥Ä Ä·¥õ·¥ú·¥ò …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ s·¥á…¥·¥õ")
                
        except Exception as e:
            print(f"‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö s·¥õ·¥Ä Ä·¥õ·¥ú·¥ò …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥: {e}")

def main():
    print("üöÄ …™…¥…™·¥õ…™·¥Ä ü…™·¥¢…™…¥…¢ ·¥†…™·¥Öx·¥õ Ä·¥Ä·¥Ñ·¥õ·¥è Ä  ô·¥è·¥õ...")
    print("=" * 50)
    
    Config.print_config()
    print("=" * 50)
    
    config_errors = Config.validate_config()
    if config_errors:
        print("‚ùå ·¥Ñ·¥è…¥“ì…™…¢·¥ú Ä·¥Ä·¥õ…™·¥è…¥ ·¥á Ä Ä·¥è Äs “ì·¥è·¥ú…¥·¥Ö:")
        for error in config_errors:
            print(f"   - {error}")
        sys.exit(1)
    
    print("‚úÖ ·¥Ñ·¥è…¥“ì…™…¢·¥ú Ä·¥Ä·¥õ…™·¥è…¥ ·¥†·¥Ä ü…™·¥Ö·¥Ä·¥õ·¥á·¥Ö")
    
    keep_alive()
    
    bot = Bot()
    bot.run()

if __name__ == "__main__":
    main()
